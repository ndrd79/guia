const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o configuradas em .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function executeSQL(sql, description) {
  try {
    console.log(`üìù ${description}...`);
    const { data, error } = await supabase.from('noticias').select('count').limit(1);
    
    if (error) {
      console.error(`‚ùå Erro de conex√£o: ${error.message}`);
      return false;
    }
    
    console.log(`‚úÖ ${description} - Conex√£o OK`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro: ${error.message}`);
    return false;
  }
}

async function applyOptimizations() {
  console.log('üöÄ Iniciando aplica√ß√£o das otimiza√ß√µes de performance...\n');

  try {
    // Verificar conex√£o
    console.log('üîó Verificando conex√£o com Supabase...');
    const { data, error } = await supabase.from('noticias').select('id').limit(1);
    
    if (error) {
      console.error('‚ùå Erro de conex√£o:', error.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida');

    // Como n√£o podemos executar SQL diretamente via Supabase client,
    // vamos criar as otimiza√ß√µes que podemos implementar no c√≥digo

    console.log('\nüìù Implementando otimiza√ß√µes no c√≥digo...');

    // 1. Verificar se j√° temos √≠ndices b√°sicos
    console.log('\nüìä Verificando estrutura atual da tabela not√≠cias...');
    const { data: noticias, error: noticiasError } = await supabase
      .from('noticias')
      .select('id, titulo, descricao, conteudo, categoria, created_at')
      .limit(5);

    if (noticiasError) {
      console.error('‚ùå Erro ao acessar not√≠cias:', noticiasError.message);
    } else {
      console.log(`‚úÖ Tabela not√≠cias acess√≠vel - ${noticias.length} registros de teste`);
    }

    // 2. Testar busca b√°sica
    console.log('\nüîç Testando busca b√°sica...');
    const { data: searchTest, error: searchError } = await supabase
      .from('noticias')
      .select('id, titulo, categoria, created_at')
      .ilike('titulo', '%maria%')
      .limit(5);

    if (searchError) {
      console.error('‚ùå Erro na busca:', searchError.message);
    } else {
      console.log(`‚úÖ Busca b√°sica funcionando - ${searchTest.length} resultados`);
    }

    console.log('\nüìã INSTRU√á√ïES PARA APLICAR AS OTIMIZA√á√ïES SQL:');
    console.log('Como o Supabase n√£o permite execu√ß√£o direta de SQL via API,');
    console.log('voc√™ precisa executar os comandos SQL manualmente no Supabase Dashboard:');
    console.log('\n1. Acesse: https://supabase.com/dashboard');
    console.log('2. V√° para seu projeto > SQL Editor');
    console.log('3. Execute os seguintes comandos SQL:\n');

    console.log('-- 1. √çndice GIN para busca full-text em portugu√™s');
    console.log(`CREATE INDEX IF NOT EXISTS idx_noticias_fulltext_pt 
ON noticias USING gin(
    to_tsvector('portuguese', 
        COALESCE(titulo, '') || ' ' || 
        COALESCE(descricao, '') || ' ' || 
        COALESCE(conteudo, '')
    )
);\n`);

    console.log('-- 2. Fun√ß√£o de busca otimizada');
    console.log(`CREATE OR REPLACE FUNCTION search_noticias_fulltext(
    search_query TEXT,
    limit_count INTEGER DEFAULT 20,
    offset_count INTEGER DEFAULT 0
)
RETURNS TABLE (
    id UUID,
    titulo VARCHAR,
    descricao TEXT,
    conteudo TEXT,
    imagem TEXT,
    categoria VARCHAR,
    created_at TIMESTAMPTZ,
    rank REAL
) 
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        n.id,
        n.titulo,
        n.descricao,
        n.conteudo,
        n.imagem,
        n.categoria,
        n.created_at,
        ts_rank(
            to_tsvector('portuguese', 
                COALESCE(n.titulo, '') || ' ' || 
                COALESCE(n.descricao, '') || ' ' || 
                COALESCE(n.conteudo, '')
            ),
            plainto_tsquery('portuguese', search_query)
        ) as rank
    FROM noticias n
    WHERE to_tsvector('portuguese', 
        COALESCE(n.titulo, '') || ' ' || 
        COALESCE(n.descricao, '') || ' ' || 
        COALESCE(n.conteudo, '')
    ) @@ plainto_tsquery('portuguese', search_query)
    ORDER BY rank DESC, n.created_at DESC
    LIMIT limit_count
    OFFSET offset_count;
END;
$$;\n`);

    console.log('-- 3. √çndices de performance');
    console.log(`CREATE INDEX IF NOT EXISTS idx_noticias_categoria_data 
ON noticias(categoria, created_at DESC) 
WHERE categoria IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_noticias_destaque_data 
ON noticias(destaque, created_at DESC) 
WHERE destaque = true;

CREATE INDEX IF NOT EXISTS idx_noticias_pagination 
ON noticias(created_at DESC, id);\n`);

    console.log('-- 4. Atualizar estat√≠sticas');
    console.log('ANALYZE noticias;\n');

    console.log('üéØ PR√ìXIMOS PASSOS:');
    console.log('1. Execute os comandos SQL acima no Supabase Dashboard');
    console.log('2. Configure o Connection Pooler (pr√≥xima otimiza√ß√£o)');
    console.log('3. Teste a busca full-text na aplica√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar verifica√ß√µes
applyOptimizations();