const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Credenciais do Supabase n√£o encontradas no .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnection() {
  console.log('üîÑ Testando conex√£o com Supabase...');
  
  try {
    // Teste b√°sico de conex√£o
    const { data, error } = await supabase
      .from('noticias')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro na conex√£o:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
    return true;
  } catch (err) {
    console.error('‚ùå Erro na conex√£o:', err.message);
    return false;
  }
}

async function testBasicSearch() {
  console.log('\nüîÑ Testando busca b√°sica na tabela noticias...');
  
  try {
    const { data, error } = await supabase
      .from('noticias')
      .select('id, titulo, descricao, categoria')
      .limit(3);
    
    if (error) {
      console.error('‚ùå Erro na busca b√°sica:', error.message);
      return false;
    }
    
    console.log('‚úÖ Busca b√°sica funcionando!');
    console.log(`üìä Encontradas ${data.length} not√≠cias de exemplo:`);
    data.forEach((noticia, index) => {
      console.log(`   ${index + 1}. ${noticia.titulo} (${noticia.categoria})`);
    });
    
    return true;
  } catch (err) {
    console.error('‚ùå Erro na busca b√°sica:', err.message);
    return false;
  }
}

async function testFullTextSearch() {
  console.log('\nüîÑ Testando fun√ß√£o search_noticias_fulltext...');
  
  try {
    // Teste se a fun√ß√£o existe
    const { data, error } = await supabase
      .rpc('search_noticias_fulltext', { 
        search_term: 'maria helena',
        limit_count: 3 
      });
    
    if (error) {
      console.error('‚ùå Erro na busca full-text:', error.message);
      if (error.message.includes('function') && error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è  A fun√ß√£o search_noticias_fulltext ainda n√£o foi criada.');
        console.log('üí° Execute as migra√ß√µes SQL para criar a fun√ß√£o.');
      }
      return false;
    }
    
    console.log('‚úÖ Fun√ß√£o search_noticias_fulltext funcionando!');
    console.log(`üìä Busca por "maria helena" retornou ${data.length} resultados:`);
    data.forEach((noticia, index) => {
      console.log(`   ${index + 1}. ${noticia.titulo} (relev√¢ncia: ${noticia.rank?.toFixed(3) || 'N/A'})`);
    });
    
    return true;
  } catch (err) {
    console.error('‚ùå Erro na busca full-text:', err.message);
    return false;
  }
}

async function testIndexes() {
  console.log('\nüîÑ Verificando √≠ndices de performance...');
  
  try {
    // Verifica se os √≠ndices existem
    const { data, error } = await supabase
      .from('pg_indexes')
      .select('indexname, tablename')
      .eq('tablename', 'noticias')
      .in('indexname', ['idx_noticias_categoria', 'idx_noticias_data_publicacao', 'idx_noticias_fulltext_pt']);
    
    if (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar √≠ndices (permiss√µes limitadas)');
      return true; // N√£o √© um erro cr√≠tico
    }
    
    const expectedIndexes = ['idx_noticias_categoria', 'idx_noticias_data_publicacao', 'idx_noticias_fulltext_pt'];
    const foundIndexes = data.map(idx => idx.indexname);
    
    console.log('üìä √çndices encontrados:');
    expectedIndexes.forEach(indexName => {
      const exists = foundIndexes.includes(indexName);
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${indexName}`);
    });
    
    return true;
  } catch (err) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar √≠ndices:', err.message);
    return true; // N√£o √© um erro cr√≠tico
  }
}

async function runAllTests() {
  console.log('üöÄ Iniciando testes de otimiza√ß√£o SQL...\n');
  
  const results = {
    connection: await testConnection(),
    basicSearch: await testBasicSearch(),
    fullTextSearch: await testFullTextSearch(),
    indexes: await testIndexes()
  };
  
  console.log('\nüìã RESUMO DOS TESTES:');
  console.log('='.repeat(40));
  console.log(`Conex√£o Supabase: ${results.connection ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Busca B√°sica: ${results.basicSearch ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Busca Full-Text: ${results.fullTextSearch ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Verifica√ß√£o √çndices: ${results.indexes ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  
  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ Todos os testes passaram! As otimiza√ß√µes est√£o funcionando.');
  } else {
    console.log('\n‚ö†Ô∏è  Alguns testes falharam. Verifique as migra√ß√µes SQL.');
  }
  
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  if (!results.fullTextSearch) {
    console.log('   1. Execute as migra√ß√µes SQL no Supabase Dashboard');
    console.log('   2. Aplique o arquivo 021_add_fulltext_search_portuguese.sql');
  }
  if (results.connection && results.basicSearch) {
    console.log('   3. Configure o Connection Pooler para melhor performance (opcional)');
  }
}

// Executar testes
runAllTests().catch(console.error);